// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationshipservice

import (
	"context"
	relation "douyin/kitex_gen/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationShipServiceServiceInfo
}

var relationShipServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationShipService"
	handlerType := (*relation.RelationShipService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":       kitex.NewMethodInfo(relationActionHandler, newRelationShipServiceRelationActionArgs, newRelationShipServiceRelationActionResult, false),
		"RelationFollowList":   kitex.NewMethodInfo(relationFollowListHandler, newRelationShipServiceRelationFollowListArgs, newRelationShipServiceRelationFollowListResult, false),
		"RelationFollowerList": kitex.NewMethodInfo(relationFollowerListHandler, newRelationShipServiceRelationFollowerListArgs, newRelationShipServiceRelationFollowerListResult, false),
		"RelationFriendList":   kitex.NewMethodInfo(relationFriendListHandler, newRelationShipServiceRelationFriendListArgs, newRelationShipServiceRelationFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationShipServiceRelationActionArgs)
	realResult := result.(*relation.RelationShipServiceRelationActionResult)
	success, err := handler.(relation.RelationShipService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationShipServiceRelationActionArgs() interface{} {
	return relation.NewRelationShipServiceRelationActionArgs()
}

func newRelationShipServiceRelationActionResult() interface{} {
	return relation.NewRelationShipServiceRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationShipServiceRelationFollowListArgs)
	realResult := result.(*relation.RelationShipServiceRelationFollowListResult)
	success, err := handler.(relation.RelationShipService).RelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationShipServiceRelationFollowListArgs() interface{} {
	return relation.NewRelationShipServiceRelationFollowListArgs()
}

func newRelationShipServiceRelationFollowListResult() interface{} {
	return relation.NewRelationShipServiceRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationShipServiceRelationFollowerListArgs)
	realResult := result.(*relation.RelationShipServiceRelationFollowerListResult)
	success, err := handler.(relation.RelationShipService).RelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationShipServiceRelationFollowerListArgs() interface{} {
	return relation.NewRelationShipServiceRelationFollowerListArgs()
}

func newRelationShipServiceRelationFollowerListResult() interface{} {
	return relation.NewRelationShipServiceRelationFollowerListResult()
}

func relationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationShipServiceRelationFriendListArgs)
	realResult := result.(*relation.RelationShipServiceRelationFriendListResult)
	success, err := handler.(relation.RelationShipService).RelationFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationShipServiceRelationFriendListArgs() interface{} {
	return relation.NewRelationShipServiceRelationFriendListArgs()
}

func newRelationShipServiceRelationFriendListResult() interface{} {
	return relation.NewRelationShipServiceRelationFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args relation.RelationShipServiceRelationActionArgs
	_args.Req = req
	var _result relation.RelationShipServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, req *relation.RelationFollowListRequest) (r *relation.RelationFollowListResponse, err error) {
	var _args relation.RelationShipServiceRelationFollowListArgs
	_args.Req = req
	var _result relation.RelationShipServiceRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, req *relation.RelationFollowerListRequest) (r *relation.RelationFollowerListResponse, err error) {
	var _args relation.RelationShipServiceRelationFollowerListArgs
	_args.Req = req
	var _result relation.RelationShipServiceRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFriendList(ctx context.Context, req *relation.RelationFriendListRequest) (r *relation.RelationFriendListResponse, err error) {
	var _args relation.RelationShipServiceRelationFriendListArgs
	_args.Req = req
	var _result relation.RelationShipServiceRelationFriendListResult
	if err = p.c.Call(ctx, "RelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
