// Code generated by Kitex v0.4.4. DO NOT EDIT.

package feedservice

import (
	"context"
	feed "douyin/kitex_gen/feed"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedServiceServiceInfo
}

var feedServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FeedService"
	handlerType := (*feed.FeedService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeed":        kitex.NewMethodInfo(getFeedHandler, newFeedServiceGetFeedArgs, newFeedServiceGetFeedResult, false),
		"PublishAction":  kitex.NewMethodInfo(publishActionHandler, newFeedServicePublishActionArgs, newFeedServicePublishActionResult, false),
		"PublishList":    kitex.NewMethodInfo(publishListHandler, newFeedServicePublishListArgs, newFeedServicePublishListResult, false),
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newFeedServiceFavoriteActionArgs, newFeedServiceFavoriteActionResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newFeedServiceFavoriteListArgs, newFeedServiceFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "feed",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServiceGetFeedArgs)
	realResult := result.(*feed.FeedServiceGetFeedResult)
	success, err := handler.(feed.FeedService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceGetFeedArgs() interface{} {
	return feed.NewFeedServiceGetFeedArgs()
}

func newFeedServiceGetFeedResult() interface{} {
	return feed.NewFeedServiceGetFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServicePublishActionArgs)
	realResult := result.(*feed.FeedServicePublishActionResult)
	success, err := handler.(feed.FeedService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServicePublishActionArgs() interface{} {
	return feed.NewFeedServicePublishActionArgs()
}

func newFeedServicePublishActionResult() interface{} {
	return feed.NewFeedServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServicePublishListArgs)
	realResult := result.(*feed.FeedServicePublishListResult)
	success, err := handler.(feed.FeedService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServicePublishListArgs() interface{} {
	return feed.NewFeedServicePublishListArgs()
}

func newFeedServicePublishListResult() interface{} {
	return feed.NewFeedServicePublishListResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServiceFavoriteActionArgs)
	realResult := result.(*feed.FeedServiceFavoriteActionResult)
	success, err := handler.(feed.FeedService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceFavoriteActionArgs() interface{} {
	return feed.NewFeedServiceFavoriteActionArgs()
}

func newFeedServiceFavoriteActionResult() interface{} {
	return feed.NewFeedServiceFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedServiceFavoriteListArgs)
	realResult := result.(*feed.FeedServiceFavoriteListResult)
	success, err := handler.(feed.FeedService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedServiceFavoriteListArgs() interface{} {
	return feed.NewFeedServiceFavoriteListArgs()
}

func newFeedServiceFavoriteListResult() interface{} {
	return feed.NewFeedServiceFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, req *feed.FeedRequest) (r *feed.FeedResponse, err error) {
	var _args feed.FeedServiceGetFeedArgs
	_args.Req = req
	var _result feed.FeedServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *feed.PublishActionRequest) (r *feed.PublishActionResponse, err error) {
	var _args feed.FeedServicePublishActionArgs
	_args.Req = req
	var _result feed.FeedServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *feed.PublishListRequest) (r *feed.PublishListResponse, err error) {
	var _args feed.FeedServicePublishListArgs
	_args.Req = req
	var _result feed.FeedServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *feed.FavoriteActionRequest) (r *feed.FavoriteActionResponse, err error) {
	var _args feed.FeedServiceFavoriteActionArgs
	_args.Req = req
	var _result feed.FeedServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *feed.FavoriteListRequest) (r *feed.FavoriteListResponse, err error) {
	var _args feed.FeedServiceFavoriteListArgs
	_args.Req = req
	var _result feed.FeedServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
